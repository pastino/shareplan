// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateBanner {
  count: Int!
}

type AggregateCleaning {
  count: Int!
}

type AggregateCompany {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Banner {
  id: ID!
  imageUrl: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BannerConnection {
  pageInfo: PageInfo!
  edges: [BannerEdge]!
  aggregate: AggregateBanner!
}

input BannerCreateInput {
  id: ID
  imageUrl: String!
}

type BannerEdge {
  node: Banner!
  cursor: String!
}

enum BannerOrderByInput {
  id_ASC
  id_DESC
  imageUrl_ASC
  imageUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BannerPreviousValues {
  id: ID!
  imageUrl: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BannerSubscriptionPayload {
  mutation: MutationType!
  node: Banner
  updatedFields: [String!]
  previousValues: BannerPreviousValues
}

input BannerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BannerWhereInput
  AND: [BannerSubscriptionWhereInput!]
  OR: [BannerSubscriptionWhereInput!]
  NOT: [BannerSubscriptionWhereInput!]
}

input BannerUpdateInput {
  imageUrl: String
}

input BannerUpdateManyMutationInput {
  imageUrl: String
}

input BannerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [BannerWhereInput!]
  OR: [BannerWhereInput!]
  NOT: [BannerWhereInput!]
}

input BannerWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type Cleaning {
  id: ID!
  title: String!
  imageUrl: String!
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CleaningConnection {
  pageInfo: PageInfo!
  edges: [CleaningEdge]!
  aggregate: AggregateCleaning!
}

input CleaningCreateInput {
  id: ID
  title: String!
  imageUrl: String!
  companies: CompanyCreateManyWithoutCleaningInput
}

input CleaningCreateOneWithoutCompaniesInput {
  create: CleaningCreateWithoutCompaniesInput
  connect: CleaningWhereUniqueInput
}

input CleaningCreateWithoutCompaniesInput {
  id: ID
  title: String!
  imageUrl: String!
}

type CleaningEdge {
  node: Cleaning!
  cursor: String!
}

enum CleaningOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  imageUrl_ASC
  imageUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CleaningPreviousValues {
  id: ID!
  title: String!
  imageUrl: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CleaningSubscriptionPayload {
  mutation: MutationType!
  node: Cleaning
  updatedFields: [String!]
  previousValues: CleaningPreviousValues
}

input CleaningSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CleaningWhereInput
  AND: [CleaningSubscriptionWhereInput!]
  OR: [CleaningSubscriptionWhereInput!]
  NOT: [CleaningSubscriptionWhereInput!]
}

input CleaningUpdateInput {
  title: String
  imageUrl: String
  companies: CompanyUpdateManyWithoutCleaningInput
}

input CleaningUpdateManyMutationInput {
  title: String
  imageUrl: String
}

input CleaningUpdateOneWithoutCompaniesInput {
  create: CleaningCreateWithoutCompaniesInput
  update: CleaningUpdateWithoutCompaniesDataInput
  upsert: CleaningUpsertWithoutCompaniesInput
  delete: Boolean
  disconnect: Boolean
  connect: CleaningWhereUniqueInput
}

input CleaningUpdateWithoutCompaniesDataInput {
  title: String
  imageUrl: String
}

input CleaningUpsertWithoutCompaniesInput {
  update: CleaningUpdateWithoutCompaniesDataInput!
  create: CleaningCreateWithoutCompaniesInput!
}

input CleaningWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  companies_every: CompanyWhereInput
  companies_some: CompanyWhereInput
  companies_none: CompanyWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CleaningWhereInput!]
  OR: [CleaningWhereInput!]
  NOT: [CleaningWhereInput!]
}

input CleaningWhereUniqueInput {
  id: ID
}

type Company {
  id: ID!
  name: String!
  subTitle: String!
  imageUrl: String
  latitude: Float
  longitude: Float
  phoneNumber: String
  cleaning: Cleaning
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CompanyConnection {
  pageInfo: PageInfo!
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  id: ID
  name: String!
  subTitle: String!
  imageUrl: String
  latitude: Float
  longitude: Float
  phoneNumber: String
  cleaning: CleaningCreateOneWithoutCompaniesInput
}

input CompanyCreateManyWithoutCleaningInput {
  create: [CompanyCreateWithoutCleaningInput!]
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateWithoutCleaningInput {
  id: ID
  name: String!
  subTitle: String!
  imageUrl: String
  latitude: Float
  longitude: Float
  phoneNumber: String
}

type CompanyEdge {
  node: Company!
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  subTitle_ASC
  subTitle_DESC
  imageUrl_ASC
  imageUrl_DESC
  latitude_ASC
  latitude_DESC
  longitude_ASC
  longitude_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CompanyPreviousValues {
  id: ID!
  name: String!
  subTitle: String!
  imageUrl: String
  latitude: Float
  longitude: Float
  phoneNumber: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CompanyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  subTitle: String
  subTitle_not: String
  subTitle_in: [String!]
  subTitle_not_in: [String!]
  subTitle_lt: String
  subTitle_lte: String
  subTitle_gt: String
  subTitle_gte: String
  subTitle_contains: String
  subTitle_not_contains: String
  subTitle_starts_with: String
  subTitle_not_starts_with: String
  subTitle_ends_with: String
  subTitle_not_ends_with: String
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  latitude: Float
  latitude_not: Float
  latitude_in: [Float!]
  latitude_not_in: [Float!]
  latitude_lt: Float
  latitude_lte: Float
  latitude_gt: Float
  latitude_gte: Float
  longitude: Float
  longitude_not: Float
  longitude_in: [Float!]
  longitude_not_in: [Float!]
  longitude_lt: Float
  longitude_lte: Float
  longitude_gt: Float
  longitude_gte: Float
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CompanyScalarWhereInput!]
  OR: [CompanyScalarWhereInput!]
  NOT: [CompanyScalarWhereInput!]
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
  AND: [CompanySubscriptionWhereInput!]
  OR: [CompanySubscriptionWhereInput!]
  NOT: [CompanySubscriptionWhereInput!]
}

input CompanyUpdateInput {
  name: String
  subTitle: String
  imageUrl: String
  latitude: Float
  longitude: Float
  phoneNumber: String
  cleaning: CleaningUpdateOneWithoutCompaniesInput
}

input CompanyUpdateManyDataInput {
  name: String
  subTitle: String
  imageUrl: String
  latitude: Float
  longitude: Float
  phoneNumber: String
}

input CompanyUpdateManyMutationInput {
  name: String
  subTitle: String
  imageUrl: String
  latitude: Float
  longitude: Float
  phoneNumber: String
}

input CompanyUpdateManyWithoutCleaningInput {
  create: [CompanyCreateWithoutCleaningInput!]
  delete: [CompanyWhereUniqueInput!]
  connect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutCleaningInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutCleaningInput!]
  deleteMany: [CompanyScalarWhereInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
}

input CompanyUpdateManyWithWhereNestedInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyDataInput!
}

input CompanyUpdateWithoutCleaningDataInput {
  name: String
  subTitle: String
  imageUrl: String
  latitude: Float
  longitude: Float
  phoneNumber: String
}

input CompanyUpdateWithWhereUniqueWithoutCleaningInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutCleaningDataInput!
}

input CompanyUpsertWithWhereUniqueWithoutCleaningInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutCleaningDataInput!
  create: CompanyCreateWithoutCleaningInput!
}

input CompanyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  subTitle: String
  subTitle_not: String
  subTitle_in: [String!]
  subTitle_not_in: [String!]
  subTitle_lt: String
  subTitle_lte: String
  subTitle_gt: String
  subTitle_gte: String
  subTitle_contains: String
  subTitle_not_contains: String
  subTitle_starts_with: String
  subTitle_not_starts_with: String
  subTitle_ends_with: String
  subTitle_not_ends_with: String
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  latitude: Float
  latitude_not: Float
  latitude_in: [Float!]
  latitude_not_in: [Float!]
  latitude_lt: Float
  latitude_lte: Float
  latitude_gt: Float
  latitude_gte: Float
  longitude: Float
  longitude_not: Float
  longitude_in: [Float!]
  longitude_not_in: [Float!]
  longitude_lt: Float
  longitude_lte: Float
  longitude_gt: Float
  longitude_gte: Float
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  cleaning: CleaningWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
}

input CompanyWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createBanner(data: BannerCreateInput!): Banner!
  updateBanner(data: BannerUpdateInput!, where: BannerWhereUniqueInput!): Banner
  updateManyBanners(data: BannerUpdateManyMutationInput!, where: BannerWhereInput): BatchPayload!
  upsertBanner(where: BannerWhereUniqueInput!, create: BannerCreateInput!, update: BannerUpdateInput!): Banner!
  deleteBanner(where: BannerWhereUniqueInput!): Banner
  deleteManyBanners(where: BannerWhereInput): BatchPayload!
  createCleaning(data: CleaningCreateInput!): Cleaning!
  updateCleaning(data: CleaningUpdateInput!, where: CleaningWhereUniqueInput!): Cleaning
  updateManyCleanings(data: CleaningUpdateManyMutationInput!, where: CleaningWhereInput): BatchPayload!
  upsertCleaning(where: CleaningWhereUniqueInput!, create: CleaningCreateInput!, update: CleaningUpdateInput!): Cleaning!
  deleteCleaning(where: CleaningWhereUniqueInput!): Cleaning
  deleteManyCleanings(where: CleaningWhereInput): BatchPayload!
  createCompany(data: CompanyCreateInput!): Company!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateManyCompanies(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  banner(where: BannerWhereUniqueInput!): Banner
  banners(where: BannerWhereInput, orderBy: BannerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Banner]!
  bannersConnection(where: BannerWhereInput, orderBy: BannerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BannerConnection!
  cleaning(where: CleaningWhereUniqueInput!): Cleaning
  cleanings(where: CleaningWhereInput, orderBy: CleaningOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cleaning]!
  cleaningsConnection(where: CleaningWhereInput, orderBy: CleaningOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CleaningConnection!
  company(where: CompanyWhereUniqueInput!): Company
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  banner(where: BannerSubscriptionWhereInput): BannerSubscriptionPayload
  cleaning(where: CleaningSubscriptionWhereInput): CleaningSubscriptionPayload
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  userId: String
  nickname: String
  password: String
  avatar: String
  email: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  userId: String
  nickname: String
  password: String
  avatar: String
  email: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  userId_ASC
  userId_DESC
  nickname_ASC
  nickname_DESC
  password_ASC
  password_DESC
  avatar_ASC
  avatar_DESC
  email_ASC
  email_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  userId: String
  nickname: String
  password: String
  avatar: String
  email: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  userId: String
  nickname: String
  password: String
  avatar: String
  email: String
}

input UserUpdateManyMutationInput {
  userId: String
  nickname: String
  password: String
  avatar: String
  email: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userId: String
  userId_not: String
  userId_in: [String!]
  userId_not_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_gt: String
  userId_gte: String
  userId_contains: String
  userId_not_contains: String
  userId_starts_with: String
  userId_not_starts_with: String
  userId_ends_with: String
  userId_not_ends_with: String
  nickname: String
  nickname_not: String
  nickname_in: [String!]
  nickname_not_in: [String!]
  nickname_lt: String
  nickname_lte: String
  nickname_gt: String
  nickname_gte: String
  nickname_contains: String
  nickname_not_contains: String
  nickname_starts_with: String
  nickname_not_starts_with: String
  nickname_ends_with: String
  nickname_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`